name: build vauthenticator

on:
  push: { }
  workflow_dispatch: { }

jobs:
  template-loading:
    runs-on: ubuntu-20.04

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: load templates on s3
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - run: |
          TEMPLATES=("welcome.html","mail-verify-challenge.html","reset-password.html","successful-mail-verify.html")
          for TEMPLATE in ${TEMPLATES[@]}
          do 
            aws s3 cp communication/default/mail/$TEMPLATE s3://${{ secrets.VAUTHENTICATOR_BUCKET }}/mail/templates/$TEMPLATE
          done
          
  provisioning:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: install nodejs
        run: |
          sudo apt -y update
          sudo apt -y install nodejs
          sudo apt -y install npm

      - name: install openjdk
        run: |
          sudo apt-get update && sudo apt-get install openjdk-17-jdk
          sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
          sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
          java -version

      - name: build testing environment
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5
      - run: |
          cd src/test/resources
          docker-compose up &
          sleep 60s
          sudo chown -R $USER:$USER *
          chmod 777 -R docker/dynamodb
          
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ secrets.AWS_REGION }}

          aws s3api create-bucket --bucket bucket --endpoint http://localhost:4566 --region us-east-1
          aws s3 cp  index.html s3://bucket/mail/templates/welcome.html --endpoint http://localhost:4566 --region us-east-1
          

      - name: Build frontend artifacts
        run: |
          cd src/main/frontend
          npm install --legacy-peer-deps
          npm run-script build

      - name: Build
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          mvn install -q

      - name: docker push
        run: |
          if [[ ${GITHUB_REF##*/} == 'master' ]]
          then
            DOCKER_TAG="latest"
          else
            DOCKER_TAG="${GITHUB_REF##*/}"
          fi
          echo "$DOCKER_TAG"
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build . -t mrflick72/vauthenticator-k8s:$DOCKER_TAG
          docker push mrflick72/vauthenticator-k8s:$DOCKER_TAG